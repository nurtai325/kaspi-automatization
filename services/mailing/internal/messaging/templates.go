package messaging

import (
	"fmt"
	"strings"

	"github.com/nurtai325/kaspi/mailing/internal/models"
)

const (
	reviewLinkBase = "https://kaspi.kz/shop/review/productreview?rating=5"
)

func NewOrderMessage(name, orderCode, shop, phone string, entries []models.Entry) string {
	text := `“ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω, %s!
%s –º–∞–≥–∞–∑–∏–Ω—ñ–Ω–µ —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç
–°—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑:   %s.
–ñ–µ—Ç–∫—ñ–∑—É –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –∫“Ø–Ω—ñ –∂“Ø–∑–µ–≥–µ –∞—Å—ã—Ä—ã–ª–∞–¥—ã.
–¢–∞–ø—Å—ã—Ä—ã—Å –Ω”©–º—ñ—Ä—ñ: %s
–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã: 10:00-20:00 –¥–µ–π—ã–Ω
–°“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π–Ω—à–∞ –æ—Å—ã %s –Ω–æ–º–µ—Ä–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑

–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã —Ç–µ–∑ –∞—Ä–∞–¥–∞ –∂–∏–Ω–∞–ø, —Å—ñ–∑–≥–µ –∂—ñ–±–µ—Ä–µ–º—ñ–∑.
–°–∞—É–¥–∞“£—ã–∑ —Å”ô—Ç—Ç—ñ –±–æ–ª—Å—ã–Ω!


*

–î–æ–±—Ä—ã–π –¥–µ–Ω—å, %s!
–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ %s
–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: %s.
–î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %s
–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å 10:00 –¥–æ 20:00
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ %s —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É 
–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–æ–±–µ—Ä—ë–º –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º.
–•–æ—Ä–æ—à–∏—Ö –ø–æ–∫—É–ø–æ–∫!`
	message := fmt.Sprintf(
		text,
		name,
		shop,
		parseEntries(entries, true),
		orderCode,
		"+"+phone,
		name,
		shop,
		parseEntries(entries, false),
		orderCode,
		"+"+phone,
	)
	return message
}

func CompletedOrderMessage(name, orderCode, productCode, shop string) string {
	reviewLink := fmt.Sprintf("%s&orderCode=%s&productCode=%s", reviewLinkBase, orderCode, productCode)
	text := `“ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω, %s!
%s –¥“Ø–∫–µ–Ω—ñ–Ω–µ–Ω —Å–∞—Ç—ã–ø –∞–ª—É—ã“£—ã–∑–±–µ–Ω “õ“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑!
–°—ñ–∑–≥–µ –±”ô—Ä—ñ “±–Ω–∞–¥—ã –¥–µ–ø “Ø–º—ñ—Ç—Ç–µ–Ω–µ–º—ñ–∑.
–°—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã ”©—Ç—ñ–ø, –±—ñ–∑–¥—ñ“£ –¥“Ø–∫–µ–Ω–Ω—ñ“£ –∞—Ç–∞—É—ã–Ω –∫”©—Ä—Å–µ—Ç–µ –æ—Ç—ã—Ä—ã–ø, –ø—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä–∞ –∞–ª–∞—Å—ã–∑ –±–∞, –±“±–ª –±—ñ–∑ “Ø—à—ñ–Ω –º–∞“£—ã–∑–¥—ã‚§µÔ∏è:
%s
–°—ñ–ª—Ç–µ–º–µ –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª—É—ã “Ø—à—ñ–Ω –∂–∞—É–∞–ø —Ä–µ—Ç—ñ–Ω–¥–µ –±—ñ—Ä–¥–µ“£–µ –∂–∞–∑—ã“£—ã–∑.

üî∏üî∏üî∏

–î–æ–±—Ä—ã–π –¥–µ–Ω—å, %s!
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π —Å –º–∞–≥–∞–∑–∏–Ω–∞ %s!
–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.
–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Å–ª–æ–∂–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ‚§µÔ∏è:
%s
–ß—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –æ—Ç–≤–µ—Ç.`
	message := fmt.Sprintf(text, name, shop, reviewLink, name, shop, reviewLink)
	return message
}

func parseEntries(entries []models.Entry, kz bool) string {
	parsed := strings.Builder{}
	length := len(entries)

	for i, entry := range entries {
		parsedEntry := ""
		if kz {
			parsedEntry = fmt.Sprintf(
				"%s, %d –¥–∞–Ω–∞, –±–∞“ì–∞—Å—ã: %d",
				entry.ProductName,
				entry.Quantity,
				entry.Price,
			)
		} else {
			parsedEntry = fmt.Sprintf(
				"%s, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d, —Ü–µ–Ω–∞: %d",
				entry.ProductName,
				entry.Quantity,
				entry.Price,
			)
		}
		parsed.WriteString(parsedEntry)
		if i+1 != length {
			parsed.WriteString(",")
		}
	}
	parsed.WriteString(".")

	return parsed.String()
}
